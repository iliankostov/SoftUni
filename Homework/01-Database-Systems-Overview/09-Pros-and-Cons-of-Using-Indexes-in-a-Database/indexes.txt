An index is a copy of select columns of data from a table that can be searched very efficiently that also includes a low-level disk block address or direct link to the complete row of data it was copied from. Indexing is defined based on its indexing attributes. Indexing can be of the following types:
1. Primary Index - The database tables often have a column or combination of columns whose value uniquely identifies each row in the table. This column is called the primary key of the table. The primary key of the table definition in the database diagram automatically create a primary key index, primary key index is the only index specific type. The index requires each value in the primary key only. When using the primary key index in the query, it allows quick access to the data.
2. Secondary Index - secondary index may be generated from a field which is a candidate key and has a unique value in every record, or a non-key with duplicate values.
3. Clustering Index - In a clustered index, the physical order of the rows in the table with the key the same as the logical (indexed) order. A table can contain only one clustered index. If an index is not a clustered index, the physical order of rows and the logical order of the key table does not match. Compared with the non-clustered indexes, clustered index usually provides faster data access speed.
Index records comprise search-key values and data pointers. Multilevel index is stored on the disk along with the actual database files. As the size of the database grows, so does the size of the indices. There is an immense need to keep the index records in the main memory so as to speed up the search operations. If single-level index is used, then a large size index cannot be kept in memory which leads to multiple disk accesses. Multi-level Index helps in breaking down the index into several smaller indices in order to make the outermost level so small that it can be saved in a single disk block, which can easily be accommodated anywhere in the main memory.
A B-tree is a balanced binary search tree that follows a multi-level index format. The leaf nodes of a B-tree denote actual data pointers. B-tree ensures that all leaf nodes remain at the same height, thus balanced. Additionally, the leaf nodes are linked using a link list; therefore, a B-tree can support random access as well as sequential access.
Column-store index is a new type of index introduced in SQL Server 2012. It is a column-based non-clustered index geared toward increasing query performance for workloads that involve large amounts of data, typically found in data warehouse fact tables.
Full-Text Search lets users and applications run full-text queries against character-based data in tables. Before you can run full-text queries on a table, the database administrator must create a full-text index on the table. The full-text index includes one or more character-based columns in the table. Each full-text index indexes one or more columns from the table, and each column can use a specific language. Full-text queries perform linguistic searches against text data in full-text indexes by operating on words and phrases based on rules of a particular language. Full-text queries can include simple words and phrases or multiple forms of a word or phrase. A full-text query returns any documents that contain at least one match (also known as a hit). A match occurs when a target document contains all the terms specified in the full-text query, and meets any other search conditions, such as the distance between the matching terms.
A spatial index is a type of extended index that allows you to index a spatial column. A spatial column is a table column that contains data of a spatial data type, such as geometry or geography.
Advantages: use an index for quick access to a database table specific information. The index is a structure of the database table the value of one or more columns to sort. As a general rule, only when the data in the index column Frequent queries, only need to create an index on the table. The index take up disk space and reduce to add, delete, and update the line speed. In most cases, the speed advantages of indexes for data retrieval greatly exceeds it. 
Disadvantages: too index will affect the speed of update and insert, because it requires the same update each index file. For a frequently updated and inserted into the table, there is no need for a rarely used where the words indexed separately, small table, the cost of sorting will not be great, there is no need to create additional indexes. In some cases, the indexing words may not be fast, for example, the index is placed in a contiguous memory space, which will increase the burden of disk read, which is optimal, it should be through the actual use of the environment to be tested.